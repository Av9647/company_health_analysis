# app/models.py

from .db import db


class Company(db.Model):
    __tablename__ = 'company'
    ticker = db.Column(db.String(10), primary_key=True)
    name = db.Column(db.String(100))
    address = db.Column(db.String(255))
    beta = db.Column(db.Float)
    ceo = db.Column(db.String(100))
    changes = db.Column(db.Float)
    cik = db.Column(db.String(20))
    city = db.Column(db.String(50))
    country = db.Column(db.String(50))
    currency = db.Column(db.String(10))
    cusip = db.Column(db.String(20))
    dcf = db.Column(db.Float)
    dcf_diff = db.Column(db.Float)
    default_image = db.Column(db.Boolean)
    description = db.Column(db.Text)
    exchange = db.Column(db.String(100))
    exchange_short_name = db.Column(db.String(50))
    full_time_employees = db.Column(db.String(20))  # String to accommodate large numbers
    image = db.Column(db.String(255))
    industry = db.Column(db.String(100))
    ipo_date = db.Column(db.String(10))
    is_actively_trading = db.Column(db.Boolean)
    is_adr = db.Column(db.Boolean)
    is_etf = db.Column(db.Boolean)
    is_fund = db.Column(db.Boolean)
    isin = db.Column(db.String(20))
    last_div = db.Column(db.Float)
    market_cap = db.Column(db.Float)
    phone = db.Column(db.String(50))
    price = db.Column(db.Float)
    price_range = db.Column(db.String(50))  # "range" reserved word in Python
    sector = db.Column(db.String(50))
    state = db.Column(db.String(50), nullable=True)
    vol_avg = db.Column(db.Integer)
    website = db.Column(db.String(255))
    zip_code = db.Column(db.String(20))
    # Relationships with other tables
    balance_sheet = db.relationship('BalanceSheet', backref='company', lazy=True)
    income_statement = db.relationship('IncomeStatement', backref='company', lazy=True)
    cash_flow = db.relationship('CashFlow', backref='company', lazy=True)


class BalanceSheet(db.Model):
    __tablename__ = 'balance_sheet'
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10), db.ForeignKey('company.ticker'), nullable=False)
    accepted_date = db.Column(db.String(20))
    account_payables = db.Column(db.Float)
    accumulated_other_comprehensive_income_loss = db.Column(db.Float)
    calendar_year = db.Column(db.String(4))
    capital_lease_obligations = db.Column(db.Float)
    cash_and_cash_equivalents = db.Column(db.Float)
    cash_and_short_term_investments = db.Column(db.Float)
    cik = db.Column(db.String(20))
    common_stock = db.Column(db.Float)
    date = db.Column(db.String(10))
    deferred_revenue = db.Column(db.Float)
    deferred_revenue_non_current = db.Column(db.Float)
    deferred_tax_liabilities_non_current = db.Column(db.Float)
    filling_date = db.Column(db.String(20))
    final_link = db.Column(db.String(255))
    goodwill = db.Column(db.Float)
    goodwill_and_intangible_assets = db.Column(db.Float)
    intangible_assets = db.Column(db.Float)
    inventory = db.Column(db.Float)
    link = db.Column(db.String(255))
    long_term_debt = db.Column(db.Float)
    long_term_investments = db.Column(db.Float)
    minority_interest = db.Column(db.Float)
    net_debt = db.Column(db.Float)
    net_receivables = db.Column(db.Float)
    other_assets = db.Column(db.Float)
    other_current_assets = db.Column(db.Float)
    other_current_liabilities = db.Column(db.Float)
    other_liabilities = db.Column(db.Float)
    other_non_current_assets = db.Column(db.Float)
    other_non_current_liabilities = db.Column(db.Float)
    othertotal_stockholders_equity = db.Column(db.Float)
    period = db.Column(db.String(5))
    preferred_stock = db.Column(db.Float)
    property_plant_equipment_net = db.Column(db.Float)
    reported_currency = db.Column(db.String(10))
    retained_earnings = db.Column(db.Float)
    short_term_debt = db.Column(db.Float)
    short_term_investments = db.Column(db.Float)
    tax_assets = db.Column(db.Float)
    tax_payables = db.Column(db.Float)
    total_assets = db.Column(db.Float)
    total_current_assets = db.Column(db.Float)
    total_current_liabilities = db.Column(db.Float)
    total_debt = db.Column(db.Float)
    total_equity = db.Column(db.Float)
    total_investments = db.Column(db.Float)
    total_liabilities = db.Column(db.Float)
    total_liabilities_and_stockholders_equity = db.Column(db.Float)
    total_liabilities_and_total_equity = db.Column(db.Float)
    total_non_current_assets = db.Column(db.Float)
    total_non_current_liabilities = db.Column(db.Float)
    total_stockholders_equity = db.Column(db.Float)


class IncomeStatement(db.Model):
    __tablename__ = 'income_statement'
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10), db.ForeignKey('company.ticker'), nullable=False)
    accepted_date = db.Column(db.String(50))
    calendar_year = db.Column(db.String(10))
    cik = db.Column(db.String(20))
    cost_and_expenses = db.Column(db.Float)
    cost_of_revenue = db.Column(db.Float)
    date = db.Column(db.String(50))
    depreciation_and_amortization = db.Column(db.Float)
    ebitda = db.Column(db.Float)
    ebitda_ratio = db.Column(db.Float)
    eps = db.Column(db.Float)
    eps_diluted = db.Column(db.Float)
    filling_date = db.Column(db.String(50))
    final_link = db.Column(db.String(255))
    general_and_administrative_expenses = db.Column(db.Float)
    gross_profit = db.Column(db.Float)
    gross_profit_ratio = db.Column(db.Float)
    income_before_tax = db.Column(db.Float)
    income_before_tax_ratio = db.Column(db.Float)
    income_tax_expense = db.Column(db.Float)
    interest_expense = db.Column(db.Float)
    interest_income = db.Column(db.Float)
    link = db.Column(db.String(255))
    net_income = db.Column(db.Float)
    net_income_ratio = db.Column(db.Float)
    operating_expenses = db.Column(db.Float)
    operating_income = db.Column(db.Float)
    operating_income_ratio = db.Column(db.Float)
    other_expenses = db.Column(db.Float)
    period = db.Column(db.String(10))
    reported_currency = db.Column(db.String(10))
    research_and_development_expenses = db.Column(db.Float)
    revenue = db.Column(db.Float)
    selling_and_marketing_expenses = db.Column(db.Float)
    selling_general_and_administrative_expenses = db.Column(db.Float)
    total_other_income_expenses_net = db.Column(db.Float)
    weighted_average_shs_out = db.Column(db.Float)
    weighted_average_shs_out_dil = db.Column(db.Float)

class CashFlow(db.Model):
    __tablename__ = 'cash_flow'
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10), db.ForeignKey('company.ticker'), nullable=False)
    accepted_date = db.Column(db.String(20))
    accounts_payables = db.Column(db.Float)
    accounts_receivables = db.Column(db.Float)
    acquisitions_net = db.Column(db.Float)
    calendar_year = db.Column(db.String(4))
    capital_expenditure = db.Column(db.Float)
    cash_at_beginning_of_period = db.Column(db.Float)
    cash_at_end_of_period = db.Column(db.Float)
    change_in_working_capital = db.Column(db.Float)
    cik = db.Column(db.String(20))
    common_stock_issued = db.Column(db.Float)
    common_stock_repurchased = db.Column(db.Float)
    date = db.Column(db.String(10))
    debt_repayment = db.Column(db.Float)
    deferred_income_tax = db.Column(db.Float)
    depreciation_and_amortization = db.Column(db.Float)
    dividends_paid = db.Column(db.Float)
    effect_of_forex_changes_on_cash = db.Column(db.Float)
    filling_date = db.Column(db.String(20))
    final_link = db.Column(db.String(255))
    free_cash_flow = db.Column(db.Float)
    inventory = db.Column(db.Float)
    investments_in_property_plant_and_equipment = db.Column(db.Float)
    link = db.Column(db.String(255))
    net_cash_provided_by_operating_activities = db.Column(db.Float)
    net_cash_used_for_investing_activities = db.Column(db.Float)
    net_cash_used_provided_by_financing_activities = db.Column(db.Float)
    net_change_in_cash = db.Column(db.Float)
    net_income = db.Column(db.Float)
    operating_cash_flow = db.Column(db.Float)
    other_financing_activities = db.Column(db.Float)
    other_investing_activities = db.Column(db.Float)
    other_non_cash_items = db.Column(db.Float)
    other_working_capital = db.Column(db.Float)
    period = db.Column(db.String(5))
    purchases_of_investments = db.Column(db.Float)
    reported_currency = db.Column(db.String(10))
    sales_maturities_of_investments = db.Column(db.Float)
    stock_based_compensation = db.Column(db.Float)